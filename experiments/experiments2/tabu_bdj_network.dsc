belief network "unknown"
node keyid {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node vars {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node constl {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node opaspr {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node dtype {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node ampas {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node assgn {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node arith {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node logrel {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node block {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node decl {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node exprn {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node lrvalue {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node incdcr {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node varscop {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node fncpro {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node init {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node itcpt {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node selcpt {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node fncpar {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node countit {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node eventit {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node multi {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node nestit {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node fncdef {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node callfnc {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node pasaddr {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node stdio {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node conti {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node exitlp {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node endlp {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node beflp {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node ifelse {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node ifseri {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node switch {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node scanf {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node printf {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node break {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node prepost {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node elseif {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node return {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node default {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node constr {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node fncs {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node sequen {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
probability ( keyid | assgn, decl, exprn ) {
  (0, 0, 0) : 0.984375, 0.015625;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 0.3333333, 0.6666667;
  (1, 1, 0) : 0.5, 0.5;
  (0, 0, 1) : 0.8, 0.2;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 1.0, 0.0;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( vars ) {
   0.8875, 0.1125;
}
probability ( constl | vars, opaspr, logrel, fncpro, callfnc ) {
  (0, 0, 0, 0, 0) : 1.0, 0.0;
  (1, 0, 0, 0, 0) : 1.0, 0.0;
  (0, 1, 0, 0, 0) : 0.5, 0.5;
  (1, 1, 0, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0, 0) : 0.5, 0.5;
  (1, 0, 1, 0, 0) : 0.5, 0.5;
  (0, 1, 1, 0, 0) : 0.5, 0.5;
  (1, 1, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 0, 1, 0) : 0.7777778, 0.2222222;
  (1, 0, 0, 1, 0) : 0.0, 1.0;
  (0, 1, 0, 1, 0) : 0.5, 0.5;
  (1, 1, 0, 1, 0) : 0.5, 0.5;
  (0, 0, 1, 1, 0) : 0.5, 0.5;
  (1, 0, 1, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 1, 0) : 0.0, 1.0;
  (1, 1, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 0, 1) : 0.5, 0.5;
  (1, 0, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 0, 1) : 0.5, 0.5;
  (1, 0, 1, 0, 1) : 0.5, 0.5;
  (0, 1, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 0, 1, 1) : 1.0, 0.0;
  (1, 0, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 0, 1, 1) : 0.5, 0.5;
  (1, 1, 0, 1, 1) : 0.5, 0.5;
  (0, 0, 1, 1, 1) : 0.0, 1.0;
  (1, 0, 1, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 1, 1) : 1.0, 0.0;
  (1, 1, 1, 1, 1) : 0.5, 0.5;
}
probability ( opaspr | assgn ) {
  (0) : 0.97260274, 0.02739726;
  (1) : 0.0, 1.0;
}
probability ( dtype | assgn ) {
  (0) : 1.0, 0.0;
  (1) : 0.2857143, 0.7142857;
}
probability ( ampas | opaspr, assgn, arith, stdio, scanf ) {
  (0, 0, 0, 0, 0) : 0.94827586, 0.05172414;
  (1, 0, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 0, 0) : 0.5, 0.5;
  (1, 1, 0, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0, 0) : 1.0, 0.0;
  (1, 0, 1, 0, 0) : 0.0, 1.0;
  (0, 1, 1, 0, 0) : 0.5, 0.5;
  (1, 1, 1, 0, 0) : 1.0, 0.0;
  (0, 0, 0, 1, 0) : 0.8, 0.2;
  (1, 0, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 0, 1, 0) : 0.5, 0.5;
  (1, 1, 0, 1, 0) : 0.5, 0.5;
  (0, 0, 1, 1, 0) : 0.0, 1.0;
  (1, 0, 1, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 1, 0) : 0.0, 1.0;
  (0, 0, 0, 0, 1) : 0.0, 1.0;
  (1, 0, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 0, 1) : 0.5, 0.5;
  (1, 0, 1, 0, 1) : 0.0, 1.0;
  (0, 1, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 1, 0, 1) : 0.0, 1.0;
  (0, 0, 0, 1, 1) : 0.5, 0.5;
  (1, 0, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 0, 1, 1) : 0.5, 0.5;
  (1, 1, 0, 1, 1) : 0.5, 0.5;
  (0, 0, 1, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 1, 1) : 0.5, 0.5;
  (1, 1, 1, 1, 1) : 0.0, 1.0;
}
probability ( assgn | decl ) {
  (0) : 1.0, 0.0;
  (1) : 0.3636364, 0.6363636;
}
probability ( arith | logrel, fncdef, endlp, elseif ) {
  (0, 0, 0, 0) : 1.0, 0.0;
  (1, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 0) : 0.8, 0.2;
  (1, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0) : 0.75, 0.25;
  (1, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 0) : 0.0, 1.0;
  (1, 1, 1, 0) : 0.0, 1.0;
  (0, 0, 0, 1) : 1.0, 0.0;
  (1, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 1) : 0.0, 1.0;
  (1, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 1) : 1.0, 0.0;
  (1, 1, 1, 1) : 0.0, 1.0;
}
probability ( logrel | opaspr ) {
  (0) : 0.98591549, 0.01408451;
  (1) : 0.0, 1.0;
}
probability ( block | endlp, beflp, break, sequen ) {
  (0, 0, 0, 0) : 1.0, 0.0;
  (1, 0, 0, 0) : 0.6666667, 0.3333333;
  (0, 1, 0, 0) : 0.0, 1.0;
  (1, 1, 0, 0) : 1.0, 0.0;
  (0, 0, 1, 0) : 0.0, 1.0;
  (1, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 0) : 0.0, 1.0;
  (0, 0, 0, 1) : 0.5, 0.5;
  (1, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 1) : 0.0, 1.0;
  (0, 0, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 1) : 0.5, 0.5;
  (1, 1, 1, 1) : 0.0, 1.0;
}
probability ( decl | vars ) {
  (0) : 0.97183099, 0.02816901;
  (1) : 0.0, 1.0;
}
probability ( exprn | opaspr ) {
  (0) : 0.94366197, 0.05633803;
  (1) : 0.0, 1.0;
}
probability ( lrvalue | assgn ) {
  (0) : 1.0, 0.0;
  (1) : 0.0, 1.0;
}
probability ( incdcr | keyid, exprn ) {
  (0, 0) : 1.0, 0.0;
  (1, 0) : 0.6666667, 0.3333333;
  (0, 1) : 0.0, 1.0;
  (1, 1) : 0.0, 1.0;
}
probability ( varscop | selcpt, stdio, exitlp, scanf ) {
  (0, 0, 0, 0) : 0.98275862, 0.01724138;
  (1, 0, 0, 0) : 1.0, 0.0;
  (0, 1, 0, 0) : 1.0, 0.0;
  (1, 1, 0, 0) : 0.0, 1.0;
  (0, 0, 1, 0) : 1.0, 0.0;
  (1, 0, 1, 0) : 1.0, 0.0;
  (0, 1, 1, 0) : 0.0, 1.0;
  (1, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 1) : 1.0, 0.0;
  (1, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 1) : 0.0, 1.0;
  (0, 1, 1, 1) : 0.5, 0.5;
  (1, 1, 1, 1) : 0.0, 1.0;
}
probability ( fncpro | arith, block, fncdef, beflp ) {
  (0, 0, 0, 0) : 1.0, 0.0;
  (1, 0, 0, 0) : 0.0, 1.0;
  (0, 1, 0, 0) : 1.0, 0.0;
  (1, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0) : 0.0, 1.0;
  (1, 0, 1, 0) : 1.0, 0.0;
  (0, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 0) : 0.0, 1.0;
  (0, 0, 0, 1) : 0.5, 0.5;
  (1, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 1) : 0.0, 1.0;
  (1, 1, 0, 1) : 0.0, 1.0;
  (0, 0, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 1) : 0.0, 1.0;
  (1, 1, 1, 1) : 0.0, 1.0;
}
probability ( init | itcpt, countit, nestit, endlp, break, default ) {
  (0, 0, 0, 0, 0, 0) : 1.0, 0.0;
  (1, 0, 0, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 0, 0, 0) : 0.5, 0.5;
  (1, 1, 0, 0, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0, 0, 0) : 0.9, 0.1;
  (1, 0, 1, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 1, 0, 0, 0) : 0.5, 0.5;
  (1, 1, 1, 0, 0, 0) : 0.0, 1.0;
  (0, 0, 0, 1, 0, 0) : 1.0, 0.0;
  (1, 0, 0, 1, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 1, 0, 0) : 1.0, 0.0;
  (1, 1, 0, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 1, 0, 0) : 0.0, 1.0;
  (1, 0, 1, 1, 0, 0) : 0.5, 0.5;
  (0, 1, 1, 1, 0, 0) : 0.0, 1.0;
  (1, 1, 1, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 0, 0, 1, 0) : 0.5, 0.5;
  (1, 0, 0, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 0, 0, 1, 0) : 0.5, 0.5;
  (1, 1, 0, 0, 1, 0) : 0.5, 0.5;
  (0, 0, 1, 0, 1, 0) : 0.5, 0.5;
  (1, 0, 1, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 0, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 0, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 1, 1, 0) : 0.5, 0.5;
  (1, 0, 0, 1, 1, 0) : 0.5, 0.5;
  (0, 1, 0, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 0, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 1, 1, 1, 0) : 0.5, 0.5;
  (1, 0, 1, 1, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 0, 0, 1) : 0.0, 1.0;
  (1, 0, 0, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 0, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 0, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 0, 0, 1) : 1.0, 0.0;
  (1, 0, 1, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 1, 0, 0, 1) : 0.5, 0.5;
  (1, 1, 1, 0, 0, 1) : 0.5, 0.5;
  (0, 0, 0, 1, 0, 1) : 0.5, 0.5;
  (1, 0, 0, 1, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 1, 0, 1) : 0.5, 0.5;
  (1, 0, 1, 1, 0, 1) : 0.5, 0.5;
  (0, 1, 1, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 1, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 0, 0, 1, 1) : 1.0, 0.0;
  (1, 0, 0, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 0, 0, 1, 1) : 0.5, 0.5;
  (1, 1, 0, 0, 1, 1) : 0.5, 0.5;
  (0, 0, 1, 0, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 0, 1, 1) : 0.5, 0.5;
  (1, 1, 1, 0, 1, 1) : 0.5, 0.5;
  (0, 0, 0, 1, 1, 1) : 0.5, 0.5;
  (1, 0, 0, 1, 1, 1) : 0.5, 0.5;
  (0, 1, 0, 1, 1, 1) : 0.5, 0.5;
  (1, 1, 0, 1, 1, 1) : 0.0, 1.0;
  (0, 0, 1, 1, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 1, 1, 1) : 1.0, 0.0;
  (0, 1, 1, 1, 1, 1) : 1.0, 0.0;
  (1, 1, 1, 1, 1, 1) : 0.0, 1.0;
}
probability ( itcpt | incdcr ) {
  (0) : 0.96969697, 0.03030303;
  (1) : 0.0, 1.0;
}
probability ( selcpt | exprn, incdcr, callfnc ) {
  (0, 0, 0) : 1.0, 0.0;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 0.0, 1.0;
  (1, 1, 0) : 1.0, 0.0;
  (0, 0, 1) : 1.0, 0.0;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 0.5, 0.5;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( fncpar | ifelse, switch, constr ) {
  (0, 0, 0) : 1.0, 0.0;
  (1, 0, 0) : 0.0, 1.0;
  (0, 1, 0) : 0.0, 1.0;
  (1, 1, 0) : 1.0, 0.0;
  (0, 0, 1) : 1.0, 0.0;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 0.0, 1.0;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( countit | beflp, ifelse, constr ) {
  (0, 0, 0) : 1.0, 0.0;
  (1, 0, 0) : 0.25, 0.75;
  (0, 1, 0) : 0.5, 0.5;
  (1, 1, 0) : 1.0, 0.0;
  (0, 0, 1) : 1.0, 0.0;
  (1, 0, 1) : 0.0, 1.0;
  (0, 1, 1) : 0.5, 0.5;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( eventit | switch, sequen ) {
  (0, 0) : 0.9516129, 0.0483871;
  (1, 0) : 0.0, 1.0;
  (0, 1) : 0.0, 1.0;
  (1, 1) : 0.0, 1.0;
}
probability ( multi | incdcr, itcpt ) {
  (0, 0) : 0.984375, 0.015625;
  (1, 0) : 0.5, 0.5;
  (0, 1) : 0.5, 0.5;
  (1, 1) : 0.0, 1.0;
}
probability ( nestit | block, fncpro ) {
  (0, 0) : 0.8301887, 0.1698113;
  (1, 0) : 1.0, 0.0;
  (0, 1) : 0.6, 0.4;
  (1, 1) : 0.04761905, 0.95238095;
}
probability ( fncdef | switch, return ) {
  (0, 0) : 0.97959184, 0.02040816;
  (1, 0) : 0.5, 0.5;
  (0, 1) : 0.6, 0.4;
  (1, 1) : 0.0, 1.0;
}
probability ( callfnc | fncpar, eventit, endlp ) {
  (0, 0, 0) : 1.0, 0.0;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 0.0, 1.0;
  (1, 1, 0) : 0.5, 0.5;
  (0, 0, 1) : 1.0, 0.0;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 1.0, 0.0;
  (1, 1, 1) : 0.125, 0.875;
}
probability ( pasaddr | callfnc, printf, return ) {
  (0, 0, 0) : 0.7826087, 0.2173913;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 0.0, 1.0;
  (1, 1, 0) : 0.5, 0.5;
  (0, 0, 1) : 0.375, 0.625;
  (1, 0, 1) : 0.0, 1.0;
  (0, 1, 1) : 0.5, 0.5;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( stdio | printf ) {
  (0) : 0.94029851, 0.05970149;
  (1) : 0.3846154, 0.6153846;
}
probability ( conti | assgn, multi, stdio, ifelse, fncs ) {
  (0, 0, 0, 0, 0) : 0.3518519, 0.6481481;
  (1, 0, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 0, 0) : 1.0, 0.0;
  (1, 1, 0, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0, 0) : 0.8333333, 0.1666667;
  (1, 0, 1, 0, 0) : 0.5, 0.5;
  (0, 1, 1, 0, 0) : 0.5, 0.5;
  (1, 1, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 0, 1, 0) : 0.0, 1.0;
  (1, 0, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 0, 1, 0) : 0.0, 1.0;
  (1, 1, 0, 1, 0) : 0.5, 0.5;
  (0, 0, 1, 1, 0) : 0.5, 0.5;
  (1, 0, 1, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 1, 0) : 0.0, 1.0;
  (1, 1, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 0, 1) : 1.0, 0.0;
  (1, 0, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 0, 1) : 0.5, 0.5;
  (1, 0, 1, 0, 1) : 0.5, 0.5;
  (0, 1, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 0, 1, 1) : 1.0, 0.0;
  (1, 0, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 0, 1, 1) : 1.0, 0.0;
  (1, 1, 0, 1, 1) : 0.0, 1.0;
  (0, 0, 1, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 1, 1) : 0.5, 0.5;
  (1, 1, 1, 1, 1) : 1.0, 0.0;
}
probability ( exitlp | elseif, fncs ) {
  (0, 0) : 0.9516129, 0.0483871;
  (1, 0) : 1.0, 0.0;
  (0, 1) : 1.0, 0.0;
  (1, 1) : 0.1, 0.9;
}
probability ( endlp | eventit, sequen ) {
  (0, 0) : 0.94915254, 0.05084746;
  (1, 0) : 0.25, 0.75;
  (0, 1) : 0.5, 0.5;
  (1, 1) : 0.0, 1.0;
}
probability ( beflp | itcpt, eventit ) {
  (0, 0) : 1.0, 0.0;
  (1, 0) : 0.0, 1.0;
  (0, 1) : 0.0, 1.0;
  (1, 1) : 0.0, 1.0;
}
probability ( ifelse | keyid, exprn, itcpt ) {
  (0, 0, 0) : 1.0, 0.0;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 0.5, 0.5;
  (1, 1, 0) : 0.5, 0.5;
  (0, 0, 1) : 0.0, 1.0;
  (1, 0, 1) : 1.0, 0.0;
  (0, 1, 1) : 0.2, 0.8;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( ifseri | opaspr, arith, logrel, eventit ) {
  (0, 0, 0, 0) : 0.98214286, 0.01785714;
  (1, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 0) : 1.0, 0.0;
  (1, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0) : 0.5, 0.5;
  (1, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 1) : 0.625, 0.375;
  (1, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 1) : 0.0, 1.0;
  (1, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 1) : 1.0, 0.0;
  (1, 1, 1, 1) : 0.0, 1.0;
}
probability ( switch | logrel, itcpt, ifelse ) {
  (0, 0, 0) : 1.0, 0.0;
  (1, 0, 0) : 0.0, 1.0;
  (0, 1, 0) : 1.0, 0.0;
  (1, 1, 0) : 0.0, 1.0;
  (0, 0, 1) : 1.0, 0.0;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 0.0, 1.0;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( scanf | dtype, exprn ) {
  (0, 0) : 1.0, 0.0;
  (1, 0) : 0.5, 0.5;
  (0, 1) : 0.75, 0.25;
  (1, 1) : 0.0, 1.0;
}
probability ( printf | assgn, selcpt ) {
  (0, 0) : 0.95588235, 0.04411765;
  (1, 0) : 0.5, 0.5;
  (0, 1) : 0.4, 0.6;
  (1, 1) : 0.0, 1.0;
}
probability ( break | switch ) {
  (0) : 0.984375, 0.015625;
  (1) : 0.0, 1.0;
}
probability ( prepost | block, fncpar, default ) {
  (0, 0, 0) : 0.94642857, 0.05357143;
  (1, 0, 0) : 0.0, 1.0;
  (0, 1, 0) : 0.5, 0.5;
  (1, 1, 0) : 1.0, 0.0;
  (0, 0, 1) : 0.5, 0.5;
  (1, 0, 1) : 1.0, 0.0;
  (0, 1, 1) : 0.5, 0.5;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( elseif | selcpt, fncpar ) {
  (0, 0) : 0.98412698, 0.01587302;
  (1, 0) : 1.0, 0.0;
  (0, 1) : 0.4, 0.6;
  (1, 1) : 0.0, 1.0;
}
probability ( return | block ) {
  (0) : 0.8448276, 0.1551724;
  (1) : 0.0, 1.0;
}
probability ( default | break ) {
  (0) : 0.96825397, 0.03174603;
  (1) : 0.0, 1.0;
}
probability ( constr | opaspr, decl, break, default ) {
  (0, 0, 0, 0) : 0.8965517, 0.1034483;
  (1, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 0) : 0.3333333, 0.6666667;
  (1, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0) : 0.5, 0.5;
  (1, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 1) : 0.5, 0.5;
  (1, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 1) : 0.0, 1.0;
  (1, 0, 1, 1) : 1.0, 0.0;
  (0, 1, 1, 1) : 0.0, 1.0;
  (1, 1, 1, 1) : 0.0, 1.0;
}
probability ( fncs | assgn, fncpar, fncdef ) {
  (0, 0, 0) : 1.0, 0.0;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 1.0, 0.0;
  (1, 1, 0) : 0.5, 0.5;
  (0, 0, 1) : 0.875, 0.125;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 0.375, 0.625;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( sequen | fncpar ) {
  (0) : 0.984375, 0.015625;
  (1) : 0.0, 1.0;
}
