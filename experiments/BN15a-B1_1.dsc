belief network "Sub0"

node keyid
{
    name : "keyid";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (132, 48);
}

node dtype
{
    name : "dtype";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (654, 36);
}

node vars
{
    name : "vars";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (384, 60);
}

node arith
{
    name : "arith";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1068, 144);
}

node assgn
{
    name : "assgn";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1344, 126);
}

node constl
{
    name : "constl";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (702, 108);
}

node logrel
{
    name : "logrel";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (846, 174);
}

node exprn
{
    name : "exprn";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (768, 354);
}

node sequen
{
    name : "sequen";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (828, 504);
}

node multi
{
    name : "multi";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (564, 588);
}

node switch
{
    name : "switch";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (930, 726);
}

node ifelse
{
    name : "ifelse";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (522, 672);
}

node scanf
{
    name : "scanf";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (120, 768);
}

node printf
{
    name : "printf";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (234, 834);
}

node ifseri
{
    name : "ifseri";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (708, 672);
}

node elseif
{
    name : "elseif";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (420, 756);
}

probability (keyid)
{
    0.50000000, 0.50000000;
}

probability (dtype)
{
    0.50000000, 0.50000000;
}

probability (vars | keyid, dtype)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (arith)
{
    0.50000000, 0.50000000;
}

probability (assgn)
{
    0.50000000, 0.50000000;
}

probability (constl | dtype)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (logrel)
{
    0.50000000, 0.50000000;
}

probability (exprn | vars, dtype, arith, assgn, constl, logrel)
{
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
}

probability (sequen)
{
    0.50000000, 0.50000000;
}

probability (multi)
{
    0.50000000, 0.50000000;
}

probability (switch | multi)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (ifelse | multi)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (scanf)
{
    0.50000000, 0.50000000;
}

probability (printf)
{
    0.50000000, 0.50000000;
}

probability (ifseri | multi)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (elseif | multi, ifelse)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}
