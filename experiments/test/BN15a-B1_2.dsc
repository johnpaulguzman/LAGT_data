belief network "Sub0"

node keyid
{
    name : "keyid";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (132, 48);
}

node dtype
{
    name : "dtype";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (654, 36);
}

node vars
{
    name : "vars";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (384, 60);
}

node block
{
    name : "block";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (438, 174);
}

node decl
{
    name : "decl";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (150, 150);
}

node varscop
{
    name : "varscop";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (498, 294);
}

node constr
{
    name : "constr";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (324, 390);
}

node opaspr
{
    name : "opaspr";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1038, 60);
}

node arith
{
    name : "arith";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1068, 144);
}

node assgn
{
    name : "assgn";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1344, 126);
}

node constl
{
    name : "constl";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (702, 108);
}

node logrel
{
    name : "logrel";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (846, 174);
}

node exprn
{
    name : "exprn";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (768, 354);
}

node ampas
{
    name : "ampas";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (168, 300);
}

node sequen
{
    name : "sequen";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (828, 504);
}

node itcpt
{
    name : "itcpt";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1398, 558);
}

node selcpt
{
    name : "selcpt";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1128, 408);
}

node fncs
{
    name : "fncs";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (552, 492);
}

node pasaddr
{
    name : "pasaddr";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (90, 384);
}

node fncpar
{
    name : "fncpar";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (342, 480);
}

node fncpro
{
    name : "fncpro";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (138, 480);
}

node nestit
{
    name : "nestit";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (828, 612);
}

node multi
{
    name : "multi";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (564, 588);
}

node init
{
    name : "init";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1422, 240);
}

node incdcr
{
    name : "incdcr";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1032, 300);
}

node countit
{
    name : "countit";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1410, 408);
}

node eventit
{
    name : "eventit";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1050, 636);
}

node switch
{
    name : "switch";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (930, 726);
}

node fncdef
{
    name : "fncdef";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (300, 564);
}

node exitlp
{
    name : "exitlp";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (672, 744);
}

node return
{
    name : "return";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (876, 984);
}

node break
{
    name : "break";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1152, 978);
}

node ifelse
{
    name : "ifelse";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (522, 672);
}

node callfnc
{
    name : "callfnc";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (318, 672);
}

node stdio
{
    name : "stdio";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (102, 666);
}

node lrvalue
{
    name : "lrvalue";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1260, 300);
}

node scanf
{
    name : "scanf";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (120, 768);
}

node printf
{
    name : "printf";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (234, 834);
}

node ifseri
{
    name : "ifseri";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (708, 672);
}

node elseif
{
    name : "elseif";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (420, 756);
}

node beflp
{
    name : "beflp";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1110, 834);
}

node endlp
{
    name : "endlp";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (1260, 702);
}

node default
{
    name : "default";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (570, 822);
}

node prepost
{
    name : "prepost";
    type : discrete[2] = 
    {
        "Known",
        "NotKnown"
    };
    position : (426, 900);
}

probability (keyid)
{
    0.50000000, 0.50000000;
}

probability (dtype)
{
    0.50000000, 0.50000000;
}

probability (vars | keyid, dtype)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (block)
{
    0.50000000, 0.50000000;
}

probability (decl | vars, block, dtype)
{
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
}

probability (varscop | block, decl)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (constr | keyid, block, varscop)
{
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
}

probability (opaspr | dtype)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (arith | opaspr)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (assgn | opaspr)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (constl | dtype)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (logrel | opaspr)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (exprn | vars, dtype, arith, assgn, constl, logrel, opaspr)
{
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0, 0, 0, 0) : 0.50000000, 0.50000000;
}

probability (ampas | vars, opaspr)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (sequen | constr)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (itcpt | constr, exprn)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (selcpt | constr, exprn)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (fncs | dtype, constr)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (pasaddr | ampas)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (fncpar | dtype, exprn, pasaddr)
{
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
}

probability (fncpro | decl)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (nestit | block, itcpt)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (multi | block, selcpt)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (init | assgn)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (incdcr | arith, assgn)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (countit | itcpt, init, incdcr)
{
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
}

probability (eventit | itcpt)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (switch | multi)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (fncdef | fncpro, fncs, fncpar)
{
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
}

probability (exitlp | eventit)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (return | itcpt, switch, fncdef, exitlp)
{
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0, 0) : 0.50000000, 0.50000000;
}

probability (break | itcpt, exitlp, switch)
{
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
}

probability (ifelse | selcpt, multi)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (callfnc | fncpro, fncpar, fncdef)
{
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
}

probability (stdio | fncpro)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (lrvalue | assgn)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (scanf | stdio, pasaddr, callfnc)
{
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
}

probability (printf | stdio, pasaddr, callfnc)
{
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
    (0, 0, 0) : 0.50000000, 0.50000000;
}

probability (ifseri | multi)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (elseif | multi, ifelse)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}

probability (beflp | eventit)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (endlp | eventit)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (default | switch)
{
    (0) : 0.50000000, 0.50000000;
    (0) : 0.50000000, 0.50000000;
}

probability (prepost | beflp, endlp)
{
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
    (0, 0) : 0.50000000, 0.50000000;
}
