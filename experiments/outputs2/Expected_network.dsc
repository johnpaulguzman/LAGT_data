belief network "unknown"
node keyid {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node dtype {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node vars {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node block {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node decl {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node varscop {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node constr {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node opaspr {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node arith {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node assgn {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node constl {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node logrel {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node exprn {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node ampas {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node sequen {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node itcpt {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node selcpt {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node fncs {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node pasaddr {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node fncpar {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node fncpro {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node nestit {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node multi {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node init {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node incdcr {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node countit {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node eventit {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node switch {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node fncdef {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node exitlp {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node return {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node break {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node ifelse {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node callfnc {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node stdio {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node lrvalue {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node scanf {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node printf {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node ifseri {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node elseif {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node beflp {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node endlp {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node default {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
node prepost {
  type : discrete [ 2 ] = { "Known", "NotKnown" };
}
probability ( keyid ) {
   0.8625, 0.1375;
}
probability ( dtype ) {
   0.9375, 0.0625;
}
probability ( vars | keyid, dtype ) {
  (0, 0) : 0.98550725, 0.01449275;
  (1, 0) : 0.3333333, 0.6666667;
  (0, 1) : 0.5, 0.5;
  (1, 1) : 0.2, 0.8;
}
probability ( block ) {
   0.725, 0.275;
}
probability ( decl | dtype, vars, block ) {
  (0, 0, 0) : 1.0, 0.0;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 0.0, 1.0;
  (1, 1, 0) : 0.5, 0.5;
  (0, 0, 1) : 0.92857143, 0.07142857;
  (1, 0, 1) : 0.0, 1.0;
  (0, 1, 1) : 0.0, 1.0;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( varscop | block, decl ) {
  (0, 0) : 0.96428571, 0.03571429;
  (1, 0) : 0.8461538, 0.1538462;
  (0, 1) : 1.0, 0.0;
  (1, 1) : 0.3333333, 0.6666667;
}
probability ( constr | keyid, block, varscop ) {
  (0, 0, 0) : 0.8727273, 0.1272727;
  (1, 0, 0) : 1.0, 0.0;
  (0, 1, 0) : 0.3636364, 0.6363636;
  (1, 1, 0) : 0.3333333, 0.6666667;
  (0, 0, 1) : 1.0, 0.0;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 0.0, 1.0;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( opaspr | dtype ) {
  (0) : 0.94666667, 0.05333333;
  (1) : 0.0, 1.0;
}
probability ( arith | opaspr ) {
  (0) : 0.90140845, 0.09859155;
  (1) : 0.0, 1.0;
}
probability ( assgn | opaspr ) {
  (0) : 1.0, 0.0;
  (1) : 0.2222222, 0.7777778;
}
probability ( constl | dtype ) {
  (0) : 0.92, 0.08;
  (1) : 0.6, 0.4;
}
probability ( logrel | opaspr ) {
  (0) : 0.98591549, 0.01408451;
  (1) : 0.0, 1.0;
}
probability ( exprn | dtype, vars, opaspr, arith, assgn, constl, logrel ) {
  (0, 0, 0, 0, 0, 0, 0) : 0.94915254, 0.05084746;
  (1, 0, 0, 0, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 0, 0, 0, 0) : 1.0, 0.0;
  (1, 1, 0, 0, 0, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0, 0, 0, 0) : 0.5, 0.5;
  (1, 0, 1, 0, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 1, 0, 0, 0, 0) : 0.5, 0.5;
  (1, 1, 1, 0, 0, 0, 0) : 0.5, 0.5;
  (0, 0, 0, 1, 0, 0, 0) : 0.8333333, 0.1666667;
  (1, 0, 0, 1, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 1, 0, 0, 0) : 0.5, 0.5;
  (1, 1, 0, 1, 0, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 1, 0, 0, 0) : 0.5, 0.5;
  (1, 0, 1, 1, 0, 0, 0) : 0.5, 0.5;
  (0, 1, 1, 1, 0, 0, 0) : 0.5, 0.5;
  (1, 1, 1, 1, 0, 0, 0) : 0.5, 0.5;
  (0, 0, 0, 0, 1, 0, 0) : 0.5, 0.5;
  (1, 0, 0, 0, 1, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 0, 1, 0, 0) : 0.5, 0.5;
  (1, 1, 0, 0, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0, 1, 0, 0) : 0.5, 0.5;
  (1, 0, 1, 0, 1, 0, 0) : 0.5, 0.5;
  (0, 1, 1, 0, 1, 0, 0) : 0.5, 0.5;
  (1, 1, 1, 0, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 0, 1, 1, 0, 0) : 0.5, 0.5;
  (1, 0, 0, 1, 1, 0, 0) : 0.5, 0.5;
  (0, 1, 0, 1, 1, 0, 0) : 0.5, 0.5;
  (1, 1, 0, 1, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 1, 1, 0, 0) : 0.5, 0.5;
  (1, 0, 1, 1, 1, 0, 0) : 0.5, 0.5;
  (0, 1, 1, 1, 1, 0, 0) : 0.5, 0.5;
  (1, 1, 1, 1, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 0, 0, 0, 1, 0) : 1.0, 0.0;
  (1, 0, 0, 0, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 0, 0, 0, 1, 0) : 1.0, 0.0;
  (1, 1, 0, 0, 0, 1, 0) : 0.5, 0.5;
  (0, 0, 1, 0, 0, 1, 0) : 0.5, 0.5;
  (1, 0, 1, 0, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 0, 0, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 0, 0, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 1, 0, 1, 0) : 0.5, 0.5;
  (1, 0, 0, 1, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 0, 1, 0, 1, 0) : 0.5, 0.5;
  (1, 1, 0, 1, 0, 1, 0) : 0.5, 0.5;
  (0, 0, 1, 1, 0, 1, 0) : 0.5, 0.5;
  (1, 0, 1, 1, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 1, 0, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 1, 0, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 0, 1, 1, 0) : 0.5, 0.5;
  (1, 0, 0, 0, 1, 1, 0) : 0.5, 0.5;
  (0, 1, 0, 0, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 0, 0, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 1, 0, 1, 1, 0) : 0.5, 0.5;
  (1, 0, 1, 0, 1, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 0, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 0, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 1, 1, 1, 0) : 0.5, 0.5;
  (1, 0, 0, 1, 1, 1, 0) : 0.5, 0.5;
  (0, 1, 0, 1, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 0, 1, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 1, 1, 1, 1, 0) : 0.5, 0.5;
  (1, 0, 1, 1, 1, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 1, 1, 1, 0) : 0.5, 0.5;
  (1, 1, 1, 1, 1, 1, 0) : 0.5, 0.5;
  (0, 0, 0, 0, 0, 0, 1) : 0.5, 0.5;
  (1, 0, 0, 0, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 0, 0, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 0, 0, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 0, 0, 0, 1) : 0.5, 0.5;
  (1, 0, 1, 0, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 1, 0, 0, 0, 1) : 0.5, 0.5;
  (1, 1, 1, 0, 0, 0, 1) : 0.5, 0.5;
  (0, 0, 0, 1, 0, 0, 1) : 0.5, 0.5;
  (1, 0, 0, 1, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 1, 0, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 1, 0, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 1, 0, 0, 1) : 0.0, 1.0;
  (1, 0, 1, 1, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 1, 1, 0, 0, 1) : 0.5, 0.5;
  (1, 1, 1, 1, 0, 0, 1) : 0.5, 0.5;
  (0, 0, 0, 0, 1, 0, 1) : 0.5, 0.5;
  (1, 0, 0, 0, 1, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 0, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 0, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 0, 1, 0, 1) : 0.5, 0.5;
  (1, 0, 1, 0, 1, 0, 1) : 0.5, 0.5;
  (0, 1, 1, 0, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 1, 0, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 0, 1, 1, 0, 1) : 0.5, 0.5;
  (1, 0, 0, 1, 1, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 1, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 1, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 1, 1, 0, 1) : 0.5, 0.5;
  (1, 0, 1, 1, 1, 0, 1) : 0.0, 1.0;
  (0, 1, 1, 1, 1, 0, 1) : 0.0, 1.0;
  (1, 1, 1, 1, 1, 0, 1) : 0.0, 1.0;
  (0, 0, 0, 0, 0, 1, 1) : 0.5, 0.5;
  (1, 0, 0, 0, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 0, 0, 0, 1, 1) : 0.5, 0.5;
  (1, 1, 0, 0, 0, 1, 1) : 0.5, 0.5;
  (0, 0, 1, 0, 0, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 0, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 0, 0, 1, 1) : 0.5, 0.5;
  (1, 1, 1, 0, 0, 1, 1) : 0.5, 0.5;
  (0, 0, 0, 1, 0, 1, 1) : 1.0, 0.0;
  (1, 0, 0, 1, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 0, 1, 0, 1, 1) : 0.5, 0.5;
  (1, 1, 0, 1, 0, 1, 1) : 0.5, 0.5;
  (0, 0, 1, 1, 0, 1, 1) : 0.0, 1.0;
  (1, 0, 1, 1, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 1, 0, 1, 1) : 0.5, 0.5;
  (1, 1, 1, 1, 0, 1, 1) : 0.5, 0.5;
  (0, 0, 0, 0, 1, 1, 1) : 0.5, 0.5;
  (1, 0, 0, 0, 1, 1, 1) : 0.5, 0.5;
  (0, 1, 0, 0, 1, 1, 1) : 0.5, 0.5;
  (1, 1, 0, 0, 1, 1, 1) : 0.5, 0.5;
  (0, 0, 1, 0, 1, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 0, 1, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 0, 1, 1, 1) : 0.5, 0.5;
  (1, 1, 1, 0, 1, 1, 1) : 0.5, 0.5;
  (0, 0, 0, 1, 1, 1, 1) : 0.5, 0.5;
  (1, 0, 0, 1, 1, 1, 1) : 0.5, 0.5;
  (0, 1, 0, 1, 1, 1, 1) : 0.5, 0.5;
  (1, 1, 0, 1, 1, 1, 1) : 0.5, 0.5;
  (0, 0, 1, 1, 1, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 1, 1, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 1, 1, 1, 1) : 0.0, 1.0;
  (1, 1, 1, 1, 1, 1, 1) : 0.0, 1.0;
}
probability ( ampas | vars, opaspr ) {
  (0, 0) : 0.8970588, 0.1029412;
  (1, 0) : 1.0, 0.0;
  (0, 1) : 0.0, 1.0;
  (1, 1) : 0.1666667, 0.8333333;
}
probability ( sequen | constr ) {
  (0) : 0.96428571, 0.03571429;
  (1) : 0.375, 0.625;
}
probability ( itcpt | constr, exprn ) {
  (0, 0) : 1.0, 0.0;
  (1, 0) : 0.7692308, 0.2307692;
  (0, 1) : 0.0, 1.0;
  (1, 1) : 0.0, 1.0;
}
probability ( selcpt | constr, exprn ) {
  (0, 0) : 1.0, 0.0;
  (1, 0) : 0.92307692, 0.07692308;
  (0, 1) : 0.5, 0.5;
  (1, 1) : 0.09090909, 0.90909091;
}
probability ( fncs | dtype, constr ) {
  (0, 0) : 0.98214286, 0.01785714;
  (1, 0) : 0.5, 0.5;
  (0, 1) : 0.6315789, 0.3684211;
  (1, 1) : 0.0, 1.0;
}
probability ( pasaddr | ampas ) {
  (0) : 0.5692308, 0.4307692;
  (1) : 0.3333333, 0.6666667;
}
probability ( fncpar | dtype, exprn, pasaddr ) {
  (0, 0, 0) : 0.97560976, 0.02439024;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 1.0, 0.0;
  (1, 1, 0) : 0.5, 0.5;
  (0, 0, 1) : 0.8846154, 0.1153846;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 0.0, 1.0;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( fncpro | decl ) {
  (0) : 0.7536232, 0.2463768;
  (1) : 0.1818182, 0.8181818;
}
probability ( nestit | block, itcpt ) {
  (0, 0) : 0.8103448, 0.1896552;
  (1, 0) : 0.1666667, 0.8333333;
  (0, 1) : 0.5, 0.5;
  (1, 1) : 0.0625, 0.9375;
}
probability ( multi | block, selcpt ) {
  (0, 0) : 0.98275862, 0.01724138;
  (1, 0) : 0.7, 0.3;
  (0, 1) : 0.5, 0.5;
  (1, 1) : 0.0, 1.0;
}
probability ( init | assgn ) {
  (0) : 0.8082192, 0.1917808;
  (1) : 0.0, 1.0;
}
probability ( incdcr | arith, assgn ) {
  (0, 0) : 0.9375, 0.0625;
  (1, 0) : 0.6666667, 0.3333333;
  (0, 1) : 0.5, 0.5;
  (1, 1) : 0.0, 1.0;
}
probability ( countit | itcpt, init, incdcr ) {
  (0, 0, 0) : 0.96551724, 0.03448276;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 0.6666667, 0.3333333;
  (1, 1, 0) : 0.0, 1.0;
  (0, 0, 1) : 0.5, 0.5;
  (1, 0, 1) : 1.0, 0.0;
  (0, 1, 1) : 0.5, 0.5;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( eventit | itcpt ) {
  (0) : 0.90625, 0.09375;
  (1) : 0.0625, 0.9375;
}
probability ( switch | multi ) {
  (0) : 0.96875, 0.03125;
  (1) : 0.125, 0.875;
}
probability ( fncdef | fncs, fncpar, fncpro ) {
  (0, 0, 0) : 0.98148148, 0.01851852;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 0.5, 0.5;
  (1, 1, 0) : 0.5, 0.5;
  (0, 0, 1) : 0.3333333, 0.6666667;
  (1, 0, 1) : 0.0, 1.0;
  (0, 1, 1) : 0.25, 0.75;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( exitlp | eventit ) {
  (0) : 0.94915254, 0.05084746;
  (1) : 0.5714286, 0.4285714;
}
probability ( return | itcpt, switch, fncdef, exitlp ) {
  (0, 0, 0, 0) : 0.8490566, 0.1509434;
  (1, 0, 0, 0) : 0.0, 1.0;
  (0, 1, 0, 0) : 0.5, 0.5;
  (1, 1, 0, 0) : 0.5, 0.5;
  (0, 0, 1, 0) : 0.1428571, 0.8571429;
  (1, 0, 1, 0) : 0.5, 0.5;
  (0, 1, 1, 0) : 0.0, 1.0;
  (1, 1, 1, 0) : 0.0, 1.0;
  (0, 0, 0, 1) : 1.0, 0.0;
  (1, 0, 0, 1) : 0.5, 0.5;
  (0, 1, 0, 1) : 0.5, 0.5;
  (1, 1, 0, 1) : 0.5, 0.5;
  (0, 0, 1, 1) : 0.5, 0.5;
  (1, 0, 1, 1) : 0.5, 0.5;
  (0, 1, 1, 1) : 0.5, 0.5;
  (1, 1, 1, 1) : 0.0, 1.0;
}
probability ( break | itcpt, switch, exitlp ) {
  (0, 0, 0) : 0.98333333, 0.01666667;
  (1, 0, 0) : 1.0, 0.0;
  (0, 1, 0) : 0.0, 1.0;
  (1, 1, 0) : 0.0, 1.0;
  (0, 0, 1) : 1.0, 0.0;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 0.5, 0.5;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( ifelse | selcpt, multi ) {
  (0, 0) : 0.96875, 0.03125;
  (1, 0) : 0.5, 0.5;
  (0, 1) : 0.25, 0.75;
  (1, 1) : 0.1666667, 0.8333333;
}
probability ( callfnc | fncpar, fncpro, fncdef ) {
  (0, 0, 0) : 1.0, 0.0;
  (1, 0, 0) : 0.5, 0.5;
  (0, 1, 0) : 1.0, 0.0;
  (1, 1, 0) : 0.0, 1.0;
  (0, 0, 1) : 1.0, 0.0;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 0.8571429, 0.1428571;
  (1, 1, 1) : 0.1333333, 0.8666667;
}
probability ( stdio | fncpro ) {
  (0) : 0.92592593, 0.07407407;
  (1) : 0.6923077, 0.3076923;
}
probability ( lrvalue | assgn ) {
  (0) : 1.0, 0.0;
  (1) : 0.0, 1.0;
}
probability ( scanf | pasaddr, callfnc, stdio ) {
  (0, 0, 0) : 0.975, 0.025;
  (1, 0, 0) : 1.0, 0.0;
  (0, 1, 0) : 0.5, 0.5;
  (1, 1, 0) : 0.7777778, 0.2222222;
  (0, 0, 1) : 1.0, 0.0;
  (1, 0, 1) : 1.0, 0.0;
  (0, 1, 1) : 0.5, 0.5;
  (1, 1, 1) : 0.3333333, 0.6666667;
}
probability ( printf | pasaddr, callfnc, stdio ) {
  (0, 0, 0) : 1.0, 0.0;
  (1, 0, 0) : 0.94736842, 0.05263158;
  (0, 1, 0) : 0.5, 0.5;
  (1, 1, 0) : 0.5555556, 0.4444444;
  (0, 0, 1) : 1.0, 0.0;
  (1, 0, 1) : 0.5, 0.5;
  (0, 1, 1) : 0.5, 0.5;
  (1, 1, 1) : 0.0, 1.0;
}
probability ( ifseri | multi ) {
  (0) : 0.9375, 0.0625;
  (1) : 0.25, 0.75;
}
probability ( elseif | multi, ifelse ) {
  (0, 0) : 0.98387097, 0.01612903;
  (1, 0) : 0.6666667, 0.3333333;
  (0, 1) : 0.0, 1.0;
  (1, 1) : 0.1538462, 0.8461538;
}
probability ( beflp | eventit ) {
  (0) : 0.98305085, 0.01694915;
  (1) : 0.0, 1.0;
}
probability ( endlp | eventit ) {
  (0) : 0.94915254, 0.05084746;
  (1) : 0.04761905, 0.95238095;
}
probability ( default | switch ) {
  (0) : 0.953125, 0.046875;
  (1) : 0.0, 1.0;
}
probability ( prepost | beflp, endlp ) {
  (0, 0) : 0.94545455, 0.05454545;
  (1, 0) : 0.0, 1.0;
  (0, 1) : 0.3333333, 0.6666667;
  (1, 1) : 0.2, 0.8;
}
